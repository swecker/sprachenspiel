###
heightMap = [
	[2,2,2,2,2,2,2,2,2,4,2,4,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,6,5,4,3,2,2]
	[2,2,2,2,2,2,2,2,4,2,4,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,4,2,4,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,4,2,4,2,4,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,8,3,3,3,3,3,8,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,8,3,3,3,3,3,8,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,8,3,3,3,3,3,8,2,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,8,3,3,3,3,3,8,2,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,8,8,8,3,8,8,8,2,2,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,0,0,0,0,0,8,0,0,0,0,0,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,2,2]
	[2,2,2,2,2,2,0,1,1,1,1,8,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,2,2,2,2,8,2,2]
	[2,2,2,2,2,0,1,2,2,2,8,2,2,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,8,2,2]
	[2,2,2,2,2,2,0,1,2,3,3,7,3,3,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,0,1,2,3,4,6,4,3,2,1,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,8,2,2]
	[2,2,2,2,2,2,0,1,2,3,4,5,4,3,2,1,0,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,2,2,2,8,2,2]
	[2,2,2,2,2,0,1,2,3,4,4,4,3,2,1,0,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,8,8,8,2,2]
	[2,2,2,2,2,2,0,1,2,3,3,3,3,3,2,1,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,2,2,2,2,2]
	[2,2,2,2,2,0,1,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,2,2,2,2,2]
	[2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,2,2,2,2,2]
	[2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,2,2,2,8,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,5,4,3,2,2,2]
	[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
]
###

heightMap = [
	[2,0,2,0,2,0,2]
	[0,2,0,4,0,2,0]
	[2,0,4,0,4,0,2]
	[0,4,0,6,0,4,0]
	[2,0,4,0,4,0,2]
	[0,2,0,4,0,2,0]
	[2,0,2,0,2,0,2]
]

initialize_characters = () ->
	player =
		x: 0
		y: 0
		h: 2
		oldH: 2
		z: 0
		skills:
			jump: 4

	gnome =
		x: Math.floor(Math.random()*40)
		y: Math.floor(Math.random()*40)
		h: 9
		oldH: 9
		z: 0
		skills:
			jump: 2

	pirate =
		x: Math.floor(Math.random()*40)
		y: Math.floor(Math.random()*40)
		h: 9
		oldH: 9
		z: 0
		skills:
			jump: 6
	[player, gnome, pirate]

tileSize = 16
displayHeight = 16


create_world_from_height_map = (heightMap) ->
	even  = true
	prevX = prevY = 0
	world = []
	for row, a in heightMap
		world[a] = []
		x = prevX
		y = prevY
		for height, b in row
			# the following would become something like:
			# type: typeMap[a][b]
			if Math.round(Math.random()*2) == 1
				type = "grass"
			else
				type = "dirt"
			world[a][b] =
				type: type
				z: a
				h: height
				x: x
				y: y
			x++
			y++
		if even then prevX++ else prevY--
		even = !even
	world

passable = (area, x, y, character) ->
	if area[x]?[y]?.h - character.h < character.skills.jump
		true
	else
		false

drawTiles = (world) ->
	#start = new Date()
	even = true
	html = []
	i = 0
	for row, a in world
		c = if !even then "odd " else ""
		html[i] = "<div class=\"#{c}row\">"
		i++
		for tile, b in row
			html[i] = "<div class=\"tile #{tile.type}\" style=\"
			 top:#{a*tileSize-tile.h*displayHeight}px;
			 left:#{b*(tileSize*4)}px;
			 z-index:#{a};
			\">#{a+", "+b}</div>"
			i++
		html[i] = "</div>"
		i++
		even = !even
	$('#canvas').html html.join("")
	#end = new Date()
	#alert end - start


###
$(document).bind("keydown", "i", function(){ moveCharacterUp(gnome); });
$(document).bind("keydown", "k", function(){ moveCharacterDown(gnome); });
$(document).bind("keydown", "l", function(){ moveCharacterRight(gnome); });
$(document).bind("keydown", "j", function(){ moveCharacterLeft(gnome); });
###

player = {}
area = []
$ ->
	area = create_world_from_height_map(heightMap)
	characters = initialize_characters()
	drawTiles( area )
	character = $('<div id="character" style="position:absolute; left:0; top:-85px; z-index:100;"></div>')
	$("#screen").append(character)
	player = characters[0]

$(document).bind("keydown", "w", () -> moveCharacterUp(area, player))
$(document).bind("keydown", "s", () -> moveCharacterDown(area, player))
$(document).bind("keydown", "d", () -> moveCharacterRight(area, player))
$(document).bind("keydown", "a", () -> moveCharacterLeft(area, player))

moveCharacterUp = (area, character) ->
	x = character.x
	y = character.y + 1
	if passable(area, x, y, character)
		updateCharacter(area, character, x, y)

moveCharacterDown = (area, character) ->
	x = character.x
	y = character.y - 1
	if passable(area, x, y, character)
		updateCharacter(area, character, x, y)

moveCharacterLeft = (area, character) ->
	x = character.x - 1
	y = character.y
	if passable(area, x, y, character)
		updateCharacter(area, character, x, y)

moveCharacterRight = (area, character) ->
	x = character.x + 1
	y = character.y
	if passable(area, x, y, character)
		updateCharacter(area, character, x, y)

updateCharacter = (area, character, x, y) ->
	tile = area[x][y]
	character.x = x
	character.y = y
	character.h = tile.h
	character.z = tile.z
	shiftScreen() if character == player

shiftScreen = () ->
	alert "#{player.x}, #{player.y}"
	canvasLeft =  -(tileSize*2)*(player.x+player.y)
	canvasTop  =  -(tileSize)*(player.z)
	$("#canvas").css("left", canvasLeft).css("top", canvasTop)



###
shiftScreenLeft = function() {
  topShift = 16 - (player.oldH - player.h)*16 + parseInt($('#canvas').css('top'));
  //alert(player.oldZ);
  $("#canvas").animate({'top':topShift+'px','left':'+=32'});
  $("#character").animate({'z-index':player.z});
  $("#dialogBox").append(topShift+'-> ');
}

shiftScreenRight = function() {
  topShift = -16 - (player.oldH - player.h)*16 + parseInt($('#canvas').css('top'));
  //alert(player.oldZ);
  $("#canvas").animate({'top':topShift+'px','left':'-=32'});
  $("#character").animate({'z-index':player.z});
  $("#dialogBox").append(topShift+'-> ');
}

shiftScreenDown = function() {
  topShift = -16 - (player.oldH - player.h)*16 + parseInt($('#canvas').css('top'));
  //alert(player.oldZ);
  $("#canvas").animate({'top':topShift+'px','left':'+=32'});
  $("#character").animate({'z-index':player.z});
  $("#dialogBox").append(topShift+'-> ');
}

shiftScreenUp = function() {
  topShift = 16 - (player.oldH - player.h)*16 + parseInt($('#canvas').css('top'));
  //alert(player.oldZ);
  $("#canvas").animate({'top':topShift+'px','left':'-=32'});
  $("#character").animate({'z-index':player.z});
  $("#dialogBox").append(topShift+'-> ');
}

